!function(){function config($routeProvider,$locationProvider){$routeProvider.when("/",{templateUrl:"/ng/home.html",controller:"HomeCtrl",controllerAs:"$vm"}).when("/trip",{templateUrl:"/ng/trip.html",controller:"TripCtrl",controllerAs:"$vm",resolve:{tripQuery:["$route","wlTripQuery",function($route,wlTripQuery){if($route.current.params.startDate&&$route.current.params.endDate&&$route.current.params.theme){var tripInfo={startDate:new Date($route.current.params.startDate),endDate:new Date($route.current.params.endDate),theme:$route.current.params.theme.toUpperCase(),budget:$route.current.params.budget||1e3};wlTripQuery.setTripInfo(tripInfo)}return wlTripQuery.get()}]}}).when("/trip/details/:tripIndex",{templateUrl:"/ng/details.html",controller:"DetailCtrl",controllerAs:"$vm",resolve:{tripDetails:["$route","wlTripQuery",function($route,wlTripQuery){var index=$route.current.params.tripIndex;return wlTripQuery.get(index)}]}}).otherwise("/"),$locationProvider.html5Mode(!0)}function setup(){$.material.init()}angular.module("WanderlustApp",["ngRoute","ngAnimate","ui.bootstrap"]).config(config).run(setup),config.$inject=["$routeProvider","$locationProvider"]}(),function(){"use strict";function DetailCtrl($routeParams,tripDetails){var $vm=this;$vm.index=$routeParams.tripIndex,$vm.details=tripDetails}angular.module("WanderlustApp").controller("DetailCtrl",DetailCtrl),DetailCtrl.$inject=["$routeParams","tripDetails"]}(),function(){"use strict";function HomeCtrl($location,wlTripQuery){function submitForm(){wlTripQuery.setTripInfo($vm.tripInfo),$location.path("/trip").search($vm.tripInfo)}function _getNextDate(date){return new Date(date.setDate(date.getDate()+1))}var $vm=this,tomorrow=_getNextDate(new Date),dayAfterNext=_getNextDate(new Date(tomorrow));$vm.datepickerConfig={minDate:new Date},$vm.tripInfo={startDate:tomorrow,endDate:dayAfterNext,theme:"",budget:"1000"},$vm.themeList=[{name:"Beach",key:"BEACH"},{name:"Disney",key:"DISNEY"},{name:"Gambling",key:"GAMBLING"},{name:"Historic",key:"HISTORIC"},{name:"Mountains",key:"MOUNTAINS"},{name:"National-Parks",key:"NATIONAL-PARKS"},{name:"Outdoors",key:"OUTDOORS"},{name:"Romantic",key:"ROMANTIC"},{name:"Shopping",key:"SHOPPING"},{name:"Skiing",key:"SKIING"},{name:"Theme-Park",key:"THEME-PARK"},{name:"Caribbean",key:"CARIBBEAN"}],$vm.submitForm=submitForm}angular.module("WanderlustApp").controller("HomeCtrl",HomeCtrl),HomeCtrl.$inject=["$location","wlTripQuery"]}(),function(){"use strict";function TripCtrl(tripQuery){function init(){$vm.tripList=tripQuery.data.FareInfo,$vm.tripInfo={startDate:new Date($vm.tripList[0].DepartureDateTime),endDate:new Date($vm.tripList[0].ReturnDateTime),theme:$vm.tripList[0].Theme}}var $vm=this;$vm.tripList=[],$vm.tripInfo={},init()}angular.module("WanderlustApp").controller("TripCtrl",TripCtrl),TripCtrl.$inject=["tripQuery"]}(),function(){"use strict";function wlTripQueryFactory($http,$q,$timeout){function get(){return _POST(_tripInfo)}function getTripInfo(){return _tripInfo}function setTripInfo(ti){_tripInfo=ti}function _POST(params){return $http.post(endPoint,params).success(function(data){return console.log("get stuff!",data),data})}{var endPoint="/dest_finder",_tripInfo={};({theme:"THEME-PARK",departureDate:new Date("10/01/2015"),arrivalDate:new Date("10/04/2015"),trips:[{index:1,city:"Los Angeles",out:{airline:"Virgin America",departureIATA:"SFO",arrivalIATA:"LAX",departureDate:new Date("10/01/2015 09:00"),arrivalDate:new Date("10/01/2015 10:30")},"in":{airline:"Virgin America",departureIATA:"LAX",arrivalIATA:"SFO",departureDate:new Date("10/04/2015 20:25"),arrivalDate:new Date("10/04/2015 22:00")}},{index:2,city:"Boston",out:{airline:"American Airlines",departureIATA:"SFO",arrivalIATA:"BOS",departureDate:new Date("10/01/2015 11:00"),arrivalDate:new Date("10/01/2015 12:30")},"in":{airline:"American Airlines",departureIATA:"BOS",arrivalIATA:"SFO",departureDate:new Date("10/04/2015 22:25"),arrivalDate:new Date("10/04/2015 23:50")}}]})}return{get:get,getTripInfo:getTripInfo,setTripInfo:setTripInfo}}angular.module("WanderlustApp").factory("wlTripQuery",wlTripQueryFactory),wlTripQueryFactory.$inject=["$http","$q","$timeout"]}();
//# sourceMappingURL=data:application/json;base64,