!function(){function config($routeProvider,$locationProvider){$routeProvider.when("/",{templateUrl:"/ng/home.html",controller:"HomeCtrl",controllerAs:"$vm"}).when("/trip",{templateUrl:"/ng/trip.html",controller:"TripCtrl",controllerAs:"$vm",resolve:{tripQuery:["$route","utils","wlTripQuery",function($route,utils,wlTripQuery){if(utils.isEmpty(wlTripQuery.getTripInfo())&&$route.current.params.startDate&&$route.current.params.endDate&&$route.current.params.theme){var tripInfo={startDate:new Date($route.current.params.startDate),endDate:new Date($route.current.params.endDate),theme:$route.current.params.theme.toUpperCase(),budget:$route.current.params.budget||1e3};wlTripQuery.setTripInfo(tripInfo)}return wlTripQuery.get()}]}}).when("/trip/:tripIndex",{templateUrl:"/ng/details.html",controller:"DetailCtrl",controllerAs:"$vm",resolve:{tripDetails:["$route","wlTripQuery",function($route,wlTripQuery){var index=$route.current.params.tripIndex;return wlTripQuery.getIndex(index)}]}}).otherwise("/"),$locationProvider.html5Mode(!0)}function setup(){$.material.init(),$(".select").dropdown({autoinit:".select"})}angular.module("WanderlustApp",["ngRoute","ngAnimate","ui.bootstrap"]).config(config).run(setup),config.$inject=["$routeProvider","$locationProvider"]}(),function(){"use strict";function DetailCtrl($routeParams,tripDetails,wlTripItinerary,wlHotels,wlVenues){function init(){wlHotels.get().then(function(hotels){$vm.hotels=hotels.data.results}),wlVenues.get().then(function(venues){$vm.venues=venues.data,console.log(venues)})}var $vm=this;$vm.index=$routeParams.tripIndex,$vm.details=tripDetails||wlTripItinerary.getTrip(),$vm.hotels=null,$vm.venues=null,init()}angular.module("WanderlustApp").controller("DetailCtrl",DetailCtrl),DetailCtrl.$inject=["$routeParams","tripDetails","wlTripItinerary","wlHotels","wlVenues"]}(),function(){"use strict";function HomeCtrl($location,wlTripQuery){function submitForm(){wlTripQuery.setTripInfo($vm.tripInfo),$location.path("/trip").search($vm.tripInfo)}function _getNextDate(date){return new Date(date.setDate(date.getDate()+1))}var $vm=this,tomorrow=_getNextDate(new Date),dayAfterNext=_getNextDate(new Date(tomorrow));$vm.datepickerConfig={minDate:new Date},$vm.tripInfo={startDate:tomorrow,endDate:dayAfterNext,theme:"",budget:"1000"},$vm.themeList=[{name:"Beach",key:"BEACH"},{name:"Disney",key:"DISNEY"},{name:"Gambling",key:"GAMBLING"},{name:"Historic",key:"HISTORIC"},{name:"Mountains",key:"MOUNTAINS"},{name:"National-Parks",key:"NATIONAL-PARKS"},{name:"Outdoors",key:"OUTDOORS"},{name:"Romantic",key:"ROMANTIC"},{name:"Shopping",key:"SHOPPING"},{name:"Skiing",key:"SKIING"},{name:"Theme-Park",key:"THEME-PARK"},{name:"Caribbean",key:"CARIBBEAN"}],$vm.submitForm=submitForm}angular.module("WanderlustApp").controller("HomeCtrl",HomeCtrl),HomeCtrl.$inject=["$location","wlTripQuery"]}(),function(){"use strict";function TripCtrl($location,tripQuery,wlTripQuery,wlTripItinerary,wlHotels,wlVenues){function init(){$vm.tripQuery=tripQuery.data,$vm.tripList=tripQuery.data.FareInfo;var savedTripInfo=wlTripQuery.getTripInfo();$vm.tripInfo={startDate:savedTripInfo.startDate||new Date($vm.tripList[0].DepartureDateTime),endDate:savedTripInfo.endDate||new Date($vm.tripList[0].ReturnDateTime),theme:savedTripInfo.theme||$vm.tripList[0].Theme}}function selectTrip(trip){wlTripItinerary.setTrip(trip),wlHotels.setHotelParams(trip),wlVenues.setParams($vm.tripInfo,trip.city)}var $vm=this;$vm.tripQuery={},$vm.tripList=[],$vm.tripInfo={},$vm.selectTrip=selectTrip,init()}angular.module("WanderlustApp").controller("TripCtrl",TripCtrl),TripCtrl.$inject=["$location","tripQuery","wlTripQuery","wlTripItinerary","wlHotels","wlVenues"]}(),function(){"use strict";function utils(){function isEmpty(obj){for(var key in obj)if(obj.hasOwnProperty(key))return!1;return!0}return{isEmpty:isEmpty}}angular.module("WanderlustApp").factory("utils",utils)}(),function(){"use strict";function wlHotelsFactory($http){function get(){return _POST()}function setHotelParams(hotelInfo){params.airport_code=hotelInfo.DestinationLocation,params["check-in"]=new Date(hotelInfo.DepartureDateTime),params["check-out"]=new Date(hotelInfo.ReturnDateTime),console.log("params",params)}function _POST(){return $http.post(endPoint,params).then(function(data){return data})}var endPoint="/hotel_search",params={airport_code:"","check-in":"","check-out":""};return{get:get,setHotelParams:setHotelParams}}angular.module("WanderlustApp").factory("wlHotels",wlHotelsFactory),wlHotelsFactory.$inject=["$http"]}(),function(){"use strict";function wlTripItineraryFactory(){function setTrip(t){_trip=t}function getTrip(){return _trip}var _trip="";return{setTrip:setTrip,getTrip:getTrip}}angular.module("WanderlustApp").factory("wlTripItinerary",wlTripItineraryFactory)}(),function(){"use strict";function wlTripQueryFactory($http,$q,$timeout){function get(){return _trip.FareInfo?_trip:_tripInfo?_POST(_tripInfo):void 0}function getIndex(i){return console.log("index",i),_trip.FareInfo&&_trip.FareInfo.length>0?_trip.FareInfo[i]:_POST(_tripInfo).then(function(data){return console.log("get index",data),data.FareInfo[i]})}function getTripInfo(){return _tripInfo}function setTripInfo(ti){_tripInfo=ti}function _POST(params){return $http.post(endPoint,params).success(function(data){return _trip=data,data})}var endPoint="/dest_finder",_tripInfo={},_trip={};return{get:get,getIndex:getIndex,getTripInfo:getTripInfo,setTripInfo:setTripInfo}}angular.module("WanderlustApp").factory("wlTripQuery",wlTripQueryFactory),wlTripQueryFactory.$inject=["$http","$q","$timeout"]}(),function(){"use strict";function wlVenuesFactory($http){function get(){return _POST()}function setParams(tripInfo,city){params={triptype:"restaurants",budget:tripInfo.budget||500,city:city},console.log(params)}function _POST(){return $http.post(endPoint,params)}var endPoint="/search_venue",params={};return{get:get,setParams:setParams}}angular.module("WanderlustApp").factory("wlVenues",wlVenuesFactory),wlVenuesFactory.$inject=["$http"]}();
//# sourceMappingURL=data:application/json;base64,